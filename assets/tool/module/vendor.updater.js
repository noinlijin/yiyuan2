// Generated by CoffeeScript 1.6.3
var Build, CONFIG, aliasGenerator, colors, exec, fs, name, path, project_dir, vendor_list, zonda_vendor_dir;

require("js-yaml");

fs = require("fs");

path = require("path");

colors = require("colors");

exec = require("child_process").exec;

project_dir = path.resolve('./', '../');

zonda_vendor_dir = "vendor/Zonda/vendor";

CONFIG = require("" + project_dir + "/etc/zonda.yml");

console.log("\n\n Zonda Tool".bold + ":  Update Vendor...");

Build = function(name, version, vendor_path) {
  var pkg, vendor_real_path;
  if (vendor_path === void 0) {
    vendor_path = zonda_vendor_dir;
    vendor_real_path = path.resolve("" + project_dir + "/" + vendor_path + "/" + name + "/" + version);
  } else {
    vendor_real_path = path.resolve("" + project_dir + "/" + vendor_path);
  }
  console.log("\n   Generate package.json:".bold + (" " + name) + ("[" + version + "]").yellow);
  pkg = {
    family: "" + CONFIG.web_root + "/" + vendor_path,
    name: name,
    version: version,
    spm: {
      output: ["" + name + ".js"]
    }
  };
  if (version === "" || version === null) {
    delete pkg.version;
    version = "no version info".bold;
  }
  console.log("   >>".bold + " Success!".green);
  fs.writeFileSync("" + vendor_real_path + "/package.json", JSON.stringify(pkg));
  return exec("cd " + vendor_real_path + " && spm build && cp ./dist/" + name + ".js ./", function(err, stdout) {
    if (err !== null) {
      console.log("\n   >>".bold + " ERROR".red.inverse + (" " + name) + ("[" + version + "]").yellow);
      return false;
    }
    return console.log("\n   >>".bold + " Build Success!".green + (" " + name) + ("[" + version + "]").yellow);
  });
};

aliasGenerator = require("./alias.generator");

vendor_list = aliasGenerator("" + project_dir + "/" + zonda_vendor_dir, zonda_vendor_dir);

for (name in vendor_list.info) {
  Build(name, vendor_list.info[name]);
}

module.exports = Build;
