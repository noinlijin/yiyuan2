// Generated by CoffeeScript 1.6.2
define("/assets/vendor/Zonda/vendor/util/0.0.1/util-debug", [ "./base64/base64-debug", "underscore-debug", "./dialog/dialog-debug", "bootstrap-debug", "mustache-debug", "backbone-debug", "./dialog/tpl/dialog-debug.tpl", "./exception/exception-debug", "./http/http-debug", "jquery-debug", "./pagination/pagination-debug", "./slide/slide-debug", "jquery-ui-debug", "./slide/page-debug", "./slide/trans-fade-debug", "./slide/trans-move-debug", "./stateMachine/stateMachine-debug", "./queue/queue-debug", "./form/form-debug", "./form/cell-debug", "./genre/genre-debug", "./model/model-debug", "./collection/collection-debug" ], function(require, exports, module) {
    return module.exports = {
        Base64: require("./base64/base64-debug"),
        Dialog: require("./dialog/dialog-debug"),
        Exception: require("./exception/exception-debug"),
        Http: require("./http/http-debug"),
        Pagination: require("./pagination/pagination-debug"),
        Slide: require("./slide/slide-debug"),
        StateMachine: require("./stateMachine/stateMachine-debug"),
        Queue: require("./queue/queue-debug"),
        Form: require("./form/form-debug"),
        Genre: require("./genre/genre-debug"),
        Model: require("./model/model-debug"),
        Collection: require("./collection/collection-debug")
    };
});

// Generated by CoffeeScript 1.6.2
/* Copyright(c)

Zonda Util.base64 (c) 2013 Degas / smallsmallwolf@gmail.com
This version for Zonda, fix the Chinese bug.

jQuery port (c) 2010 Carlo Zottmann
http://github.com/carlo/jquery-base64

Original code (c) 2010 Nick Galbreath
http://code.google.com/p/stringencoders/source/browse/#svn/trunk/javascript

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/
define("/assets/vendor/Zonda/vendor/util/0.0.1/base64/base64-debug", [ "underscore-debug" ], function(require, exports, module) {
    var JSON_stringify, _, _ALPHA, _PADCHAR, _decode, _encode, _getbyte, _getbyte64;
    _ = require("underscore-debug");
    _PADCHAR = "=";
    _ALPHA = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    JSON_stringify = function(string) {
        var json;
        json = JSON.stringify(string);
        return json.replace(/[\u007f-\uffff]/g, function(c) {
            return "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
        });
    };
    _getbyte64 = function(s, i) {
        var idx;
        idx = _ALPHA.indexOf(s.charAt(i));
        if (idx === -1) {
            throw "Cannot decode base64";
        }
        return idx;
    };
    _decode = function(s) {
        var b10, i, imax, pads, x, _i;
        pads = 0;
        imax = s.length;
        x = [];
        s = String(s);
        if (imax === 0) {
            return s;
        }
        if (imax % 4 !== 0) {
            throw "Cannot decode base64";
        }
        if (s.charAt(imax - 1) === _PADCHAR) {
            pads = 1;
            if (s.charAt(imax - 2) === _PADCHAR) {
                pads = 2;
            }
            imax -= 4;
        }
        for (i = _i = 0; _i < imax; i = _i += 4) {
            b10 = _getbyte64(s, i) << 18 | _getbyte64(s, i + 1) << 12 | _getbyte64(s, i + 2) << 6 | _getbyte64(s, i + 3);
            x.push(String.fromCharCode(b10 >> 16, b10 >> 8 & 255, b10 & 255));
        }
        switch (pads) {
          case 1:
            b10 = _getbyte64(s, i) << 18 | _getbyte64(s, i + 1) << 12 | _getbyte64(s, i + 2) << 6;
            x.push(String.fromCharCode(b10 >> 16, b10 >> 8 & 255));
            break;

          case 2:
            b10 = _getbyte64(s, i) << 18 | _getbyte64(s, i + 1) << 12;
            x.push(String.fromCharCode(b10 >> 16));
        }
        return x.join("");
    };
    _getbyte = function(s, i) {
        var x;
        x = s.charCodeAt(i);
        if (x > 255) {
            throw "INVALID_CHARACTER_ERR: DOM Exception 5";
        }
        return x;
    };
    _encode = function(s) {
        var b10, i, imax, x, _i;
        if (arguments.length !== 1) {
            throw "SyntaxError: exactly one argument required";
        }
        s = String(s);
        x = [];
        imax = s.length - s.length % 3;
        if (s.length === 0) {
            return s;
        }
        for (i = _i = 0; _i < imax; i = _i += 3) {
            b10 = _getbyte(s, i) << 16 | _getbyte(s, i + 1) << 8 | _getbyte(s, i + 2);
            x.push(_ALPHA.charAt(b10 >> 18));
            x.push(_ALPHA.charAt(b10 >> 12 & 63));
            x.push(_ALPHA.charAt(b10 >> 6 & 63));
            x.push(_ALPHA.charAt(b10 & 63));
        }
        switch (s.length - imax) {
          case 1:
            b10 = _getbyte(s, i) << 16;
            x.push(_ALPHA.charAt(b10 >> 18) + _ALPHA.charAt(b10 >> 12 & 63) + _PADCHAR + _PADCHAR);
            break;

          case 2:
            b10 = _getbyte(s, i) << 16 | _getbyte(s, i + 1) << 8;
            x.push(_ALPHA.charAt(b10 >> 18) + _ALPHA.charAt(b10 >> 12 & 63) + _ALPHA.charAt(b10 >> 6 & 63) + _PADCHAR);
        }
        return x.join("");
    };
    return module.exports = {
        decode: function(s) {
            s = _decode(s);
            return JSON.parse(s);
        },
        encode: function(s) {
            s = JSON_stringify(s);
            return _encode(s);
        }
    };
});

// Generated by CoffeeScript 1.6.2
/* Usage:
```coffeescript

  # Define a new Dialog
  Util.Dialog
    title: "I am the title"

    content: "some text/HTML, or Mustache.render output"

    css:
      "height": 1200

    class: "you can add class for this dialog"

    button:
      "Yes": ->
        # Generate the a button named "Yes", and do callback when you click the button

      "Sure[class_name]": ->
        # Use [~class_name] to add class to this button,
        # if class_name is null or you don't use [~...],
        # the button's class_name will be "primary" as default.

      "Other Button": ->
        # callback

  # Open it!
  do Util.Dialog.open

  # Close it!
  do Util.Dialog.close

  # Close dialog delay a moment
  Util.Dialog.close 1200

  # Chain style
  Util.Dialog.open().close(1300)

  # Return the dialog jQuery object
  console.log Util.Dialog.$dom

  # Return the dialog config
  console.log Util.Dialog.config

  # If you want to update the position and height of this dialog, just call:
  do Util.Dialog.open

```
*/
define("/assets/vendor/Zonda/vendor/util/0.0.1/dialog/dialog-debug", [ "bootstrap-debug", "underscore-debug", "mustache-debug", "backbone-debug" ], function(require, exports, module) {
    var $, Backbone, Dialog, Mustache, buttonNameFilter, prefix, tpl, _;
    $ = require("bootstrap-debug");
    _ = require("underscore-debug");
    Mustache = require("mustache-debug");
    Backbone = require("backbone-debug");
    tpl = require("/assets/vendor/Zonda/vendor/util/0.0.1/dialog/tpl/dialog-debug.tpl");
    prefix = "zonda-util";
    buttonNameFilter = function(name) {
        var class_name, _class_name;
        _class_name = name.match(/\[~.*\]/);
        if (_class_name === null) {
            class_name = "btn-primary";
        } else {
            class_name = _class_name[0].replace(/\[~/, "").replace(/\]/, "");
        }
        return {
            class_name: class_name,
            button_name: name.replace(/\[~.*\]/, "")
        };
    };
    Dialog = function(config) {
        var callback, dialog_html;
        Dialog.config = config;
        if ($("#" + prefix + "-dialog:visible")[0]) {
            return false;
        }
        dialog_html = Mustache.render(tpl, {
            title: config.title,
            content: config.content
        });
        $(document.body).append(dialog_html);
        if (config.css) {
            $("#" + prefix + "-dialog").css(config.css);
        }
        if (config["class"]) {
            $("#" + prefix + "-dialog").addClass(config["class"]);
        }
        if (config.complete) {
            callback = config.complete;
            (function(callback) {
                return callback();
            })(callback);
        }
        _.each(config.button, function(button_callback, button_name) {
            var button_info, uid;
            uid = _.uniqueId("" + prefix + "-dialog-button-");
            button_info = buttonNameFilter(button_name);
            $("#" + prefix + "-dialog .modal-footer").append('<a href="javascript:;" id="' + uid + '" class="btn ' + button_info.class_name + '">\n  ' + button_info.button_name + "\n</a>");
            return $("#" + uid).on("click", function() {
                if ($(this).hasClass("disabled")) {
                    return false;
                } else {
                    $(this).addClass("disabled");
                }
                return button_callback.call(this);
            });
        });
        Dialog.$dom = $("#" + prefix + "-dialog");
        $("#" + prefix + "-dialog").on("hidden.bs.modal", function() {
            delete $("#" + prefix + "-dialog").modal;
            $("#" + prefix + "-dialog").remove();
            $(".modal-backdrop").remove();
            return $("body").removeClass("modal-open");
        });
        return Dialog;
    };
    Dialog.open = function() {
        Backbone.Events.trigger("zonda:dialog:open", Dialog);
        $("#" + prefix + "-dialog .modal-body").css({
            "max-height": window.innerHeight - 141
        });
        $("#" + prefix + "-dialog").modal({
            show: true,
            backdrop: Dialog.config.backdrop
        });
        return Dialog;
    };
    Dialog.close = function(delay) {
        Backbone.Events.trigger("zonda:dialog:close", Dialog);
        if (delay) {
            setTimeout(function() {
                return $("#" + prefix + "-dialog").modal("hide");
            }, delay);
        } else {
            $("#" + prefix + "-dialog").modal("hide");
        }
        return Dialog;
    };
    return module.exports = Dialog;
});

define("/assets/vendor/Zonda/vendor/util/0.0.1/dialog/tpl/dialog-debug.tpl", [], '<div id="zonda-util-dialog" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="zonda-util-dialog-title" aria-hidden="true">\n\n  <div class="modal-header">\n    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>\n    <h3 id="zonda-util-dialog-title">{{{title}}}</h3>\n  </div>\n\n  <div class="modal-body">\n    {{{content}}}\n  </div>\n\n  <div class="modal-footer">\n    <button type="button" class="btn btn-default" data-dismiss="modal" aria-hidden="true">取消</button>\n  </div>\n\n</div>\n');

// Generated by CoffeeScript 1.6.2
define("/assets/vendor/Zonda/vendor/util/0.0.1/exception/exception-debug", [], function(require, exports, module) {
    var Exception;
    Exception = function(type, error) {
        switch (type) {
          case "network":
            throw " HTTP ERROR!\ncaller: " + error.caller.NAME + "\nurl: " + error.url + "\nstatus: " + error.status + "\nresponseText: \n" + error.responseText;
            break;

          case "genre":
            throw " Genre ERROR!\nposition: " + error.position + "\nexpect: " + error.expect + "\nnot: " + error.not;
        }
    };
    return module.exports = Exception;
});

// Generated by CoffeeScript 1.6.2
define("/assets/vendor/Zonda/vendor/util/0.0.1/http/http-debug", [ "jquery-debug", "/assets/vendor/Zonda/vendor/util/0.0.1/exception/exception-debug" ], function(require, exports, module) {
    var $, Exception, Http;
    $ = require("jquery-debug");
    Exception = require("/assets/vendor/Zonda/vendor/util/0.0.1/exception/exception-debug");
    Http = function(config) {
        $.ajaxSetup({
            dataType: "JSON",
            type: "POST",
            error: function(error) {
                if (!config.caller) {
                    return null;
                }
                config.caller.trigger("" + config.namespace + ":HTTP:error", error, config.data);
                return Exception("network", {
                    caller: config.caller,
                    url: config.url,
                    status: error.status,
                    statusText: error.statusText,
                    responseText: error.responseText
                });
            },
            success: function(respond) {
                if (!config.caller) {
                    return null;
                }
                if (respond.status && respond.status !== 1 || respond.err && respond.err !== null) {
                    return config.caller.trigger("" + config.namespace + ":HTTP:error", respond.info, config.data);
                } else {
                    return config.caller.trigger("" + config.namespace + ":HTTP:success", respond.data, config.data);
                }
            }
        });
        return $.ajax(config);
    };
    return module.exports = Http;
});

// Generated by CoffeeScript 1.6.2
define("/assets/vendor/Zonda/vendor/util/0.0.1/pagination/pagination-debug", [], function(require, exports, module) {
    return module.exports = function(now, total, prefix) {
        var result;
        if (!prefix) {
            prefix = "";
        }
        result = "";
        if (now !== 1 && total >= 4) {
            result = result + ('<li>\n  <a href="#' + prefix + '/page=1">第一页</a>\n</li>');
        }
        if (now !== 1 && total > 2) {
            result = result + ('<li>\n  <a href="#' + prefix + "/page=" + (now - 1) + '">上一页</a>\n</li>');
        } else {
            result = result + '<li class="disabled">\n  <a href="javascript:;">上一页</a>\n</li>';
        }
        if (now !== 1) {
            (function() {
                var page, _i, _ref, _ref1, _results;
                _results = [];
                for (page = _i = _ref = now - 2, _ref1 = now - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; page = _ref <= _ref1 ? ++_i : --_i) {
                    if (!(page > 0)) {
                        continue;
                    }
                    _results.push(result = result + ('<li>\n  <a href="#' + prefix + "/page=" + page + '">' + page + "</a>\n</li>"));
                }
                return _results;
            })();
        }
        result = result + ('<li class="disabled">\n  <a href="javascript:;">' + now + "</a>\n</li>");
        if (now !== total) {
            (function() {
                var page, _i, _ref, _ref1, _results;
                _results = [];
                for (page = _i = _ref = now + 1, _ref1 = now + 2; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; page = _ref <= _ref1 ? ++_i : --_i) {
                    if (!(page <= total)) {
                        continue;
                    }
                    _results.push(result = result + ('<li>\n  <a href="#' + prefix + "/page=" + page + '">' + page + "</a>\n</li>"));
                }
                return _results;
            })();
        }
        if (now !== total && total > 2) {
            result = result + ('<li>\n  <a href="#' + prefix + "/page=" + (now + 1) + '">下一页</a>\n</li>');
        } else {
            result = result + '<li class="disabled">\n  <a href="javascript:;">下一页</a>\n</li>';
        }
        if (now !== total && total >= 4) {
            result = result + ('<li>\n  <a href="#' + prefix + "/page=" + total + '">最后一页</a>\n</li>');
        }
        return '<ul class="pagination">' + result + "</ul>";
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/vendor/Zonda/vendor/util/0.0.1/slide/slide-debug", [ "jquery-ui-debug", "underscore-debug", "backbone-debug", "/assets/vendor/Zonda/vendor/util/0.0.1/slide/page-debug", "jquery-debug", "mustache-debug", "/assets/vendor/Zonda/vendor/util/0.0.1/slide/trans-fade-debug", "/assets/vendor/Zonda/vendor/util/0.0.1/slide/trans-move-debug" ], function(require, exports, module) {
    var $, Backbone, Page, Slide, _;
    $ = require("jquery-ui-debug");
    _ = require("underscore-debug");
    Backbone = require("backbone-debug");
    Page = require("/assets/vendor/Zonda/vendor/util/0.0.1/slide/page-debug");
    Slide = function() {
        function Slide(config) {
            var _this = this;
            this.config = config;
            _.extend(this, Backbone.Events);
            this.cells = $(config.sel).children();
            this.length = this.cells.size();
            this.now = {
                index: 0,
                dom: this.cells.first()
            };
            if (!this.config.trans) {
                this.config.trans = "fade";
            }
            if (!this.config.delay) {
                this.config.delay = 1e3;
            }
            if (!this.config.autoPlay) {
                this.config.autoPlay = true;
            }
            this.now.dom.fadeIn("fast");
            if (this.length <= 1) {
                return null;
            }
            if (config.page) {
                Page.call(this, config);
            }
            this.autoPlay(0);
            this.cells.on("mouseover", function() {
                return _this.stop();
            });
            this.cells.on("mouseout", function() {
                return _this.autoPlay();
            });
        }
        Slide.prototype.goto = function(where) {
            var old;
            clearTimeout(this.timer);
            if (this.length <= 1) {
                return null;
            }
            if (where < 0) {
                where = this.length + where;
            }
            if (where >= this.length) {
                where = where - this.length;
            }
            this.trans[this.config.trans](where, this.now.index, this.cells);
            old = this.now;
            this.now = {
                index: where,
                dom: this.cells.eq(where)
            };
            return this.trigger("" + this.config.sel + ":goto:slide:success", this.now, old);
        };
        Slide.prototype.timer = "";
        Slide.prototype.autoPlay = function(init) {
            var where, _this = this;
            if (!this.config.autoPlay) {
                return null;
            }
            if (init === void 0) {
                where = this.now.index + 1;
            } else {
                where = init;
            }
            return this.timer = setTimeout(function() {
                _this.goto(where);
                return _this.autoPlay();
            }, this.config.delay);
        };
        Slide.prototype.next = function() {
            this.goto(this.now.index + 1);
            return this.autoPlay();
        };
        Slide.prototype.prev = function() {
            this.goto(this.now.index - 1);
            return this.autoPlay();
        };
        Slide.prototype.stop = function() {
            return this.goto(this.now.index);
        };
        Slide.prototype.trans = {
            is_first_run_slide: true,
            fade: function() {
                var fade;
                fade = require("/assets/vendor/Zonda/vendor/util/0.0.1/slide/trans-fade-debug");
                return fade.apply(this, arguments);
            },
            move: function() {
                var move;
                move = require("/assets/vendor/Zonda/vendor/util/0.0.1/slide/trans-move-debug");
                return move.apply(this, arguments);
            }
        };
        return Slide;
    }();
    return module.exports = Slide;
});

// Generated by CoffeeScript 1.6.2
define("/assets/vendor/Zonda/vendor/util/0.0.1/slide/page-debug", [ "jquery-debug", "mustache-debug" ], function(require, exports, module) {
    var $, Mustache, timer;
    $ = require("jquery-debug");
    Mustache = require("mustache-debug");
    timer = "";
    return module.exports = function(config) {
        var evt, index, _i, _ref, _this = this;
        if (config.page.event) {
            evt = config.page.event;
        } else {
            evt = "mouseover";
        }
        for (index = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; index = 0 <= _ref ? ++_i : --_i) {
            $(config.page.sel).append(Mustache.render(config.page.tpl, {
                page: index
            }));
        }
        $(config.page.sel).children().each(function(index) {
            return $(config.page.sel).children().eq(index).on(evt, function() {
                clearTimeout(timer);
                return timer = setTimeout(function() {
                    _this.goto(index);
                    return _this.autoPlay();
                }, 300);
            });
        });
        return this.on("" + config.sel + ":goto:slide:success", function(now) {
            $(config.page.sel).find(".active").removeClass("active");
            return $(config.page.sel).children().eq(now.index).addClass("active");
        });
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/vendor/Zonda/vendor/util/0.0.1/slide/trans-fade-debug", [], function(require, exports, module) {
    return module.exports = function(where, now, cells) {
        cells.eq(where).stop().fadeIn(1e3);
        if (where === now) {
            return null;
        }
        return cells.eq(now).stop().fadeOut(1e3);
    };
});

// Generated by CoffeeScript 1.6.2
define("/assets/vendor/Zonda/vendor/util/0.0.1/slide/trans-move-debug", [], function(require, exports, module) {
    return module.exports = function(where, now, cells) {
        var dis;
        dis = cells.first().parent().outerWidth();
        /*
    # It seem do not need this
    if @is_first_run_slide
      cells.eq(now).fadeIn "fast"
      @is_first_run_slide = false
      return null
    */
        if (now === 0 && where === cells.size() - 1) {
            cells.eq(where).show().css({
                left: -dis
            });
            cells.eq(now).stop().animate({
                left: dis
            });
            cells.eq(where).stop().animate({
                left: 0
            });
            return null;
        }
        if (where > now) {
            cells.eq(where).show().css({
                left: dis
            });
            cells.eq(now).stop().animate({
                left: -dis
            });
            cells.eq(where).stop().animate({
                left: 0
            });
            return null;
        }
        if (where === 0 && now === cells.size() - 1) {
            cells.eq(where).show().css({
                left: dis
            });
            cells.eq(now).stop().animate({
                left: -dis
            });
            cells.eq(where).stop().animate({
                left: 0
            });
            return null;
        }
        if (where < now) {
            cells.eq(where).show().css({
                left: -dis
            });
            cells.eq(now).stop().animate({
                left: dis
            });
            cells.eq(where).stop().animate({
                left: 0
            });
            return null;
        }
    };
});

// Generated by CoffeeScript 1.6.2
/* Usage:
 too much to say...
 write this later maybe...
*/
define("/assets/vendor/Zonda/vendor/util/0.0.1/stateMachine/stateMachine-debug", [ "underscore-debug", "backbone-debug" ], function(require, exports, module) {
    var Backbone, StateMachine, _;
    _ = require("underscore-debug");
    Backbone = require("backbone-debug");
    StateMachine = function() {};
    _.extend(StateMachine.prototype, Backbone.Events);
    StateMachine.prototype.add = function(view) {
        var _this = this;
        this.on("view:change", function(curr) {
            if (curr === view) {
                return view.activate();
            } else {
                return view.deactivate();
            }
        }, this);
        return view.active = function() {
            return _this.trigger("view:change", view);
        };
    };
    return module.exports = StateMachine;
});

// Generated by CoffeeScript 1.6.3
define("/assets/vendor/Zonda/vendor/util/0.0.1/queue/queue-debug", [ "underscore-debug", "backbone-debug" ], function(require, exports, module) {
    var Backbone, Queue, _;
    _ = require("underscore-debug");
    Backbone = require("backbone-debug");
    return Queue = function() {
        function Queue(name, size) {
            this.name = name;
            this.size = size;
            _.extend(this, Backbone.Events);
            this.data = [];
        }
        Queue.prototype.checkAll = function() {
            var cell, counter, _i, _len, _ref;
            if (this.size) {
                counter = this.size;
            } else {
                counter = this.data.length;
            }
            _ref = this.data;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                cell = _ref[_i];
                if (cell.status === "error") {
                    this.trigger("" + this.name + ":queue:error", cell);
                    break;
                }
                if (cell.status === "success") {
                    counter -= 1;
                }
            }
            if (counter === 0) {
                return this.trigger("" + this.name + ":queue:success");
            }
        };
        Queue.prototype.setter = function(name, status, info) {
            var cell, _i, _is_new, _len, _ref;
            _is_new = true;
            _ref = this.data;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                cell = _ref[_i];
                if (cell.name === name) {
                    _is_new = false;
                    cell.status = status;
                    cell.info = info;
                }
            }
            if (_is_new) {
                return this.data.push({
                    name: name,
                    status: status,
                    info: info
                });
            } else {
                return this.checkAll();
            }
        };
        return Queue;
    }();
});

// Generated by CoffeeScript 1.6.2
define("/assets/vendor/Zonda/vendor/util/0.0.1/form/form-debug", [ "jquery-debug", "underscore-debug", "backbone-debug", "/assets/vendor/Zonda/vendor/util/0.0.1/form/cell-debug", "/assets/vendor/Zonda/vendor/util/0.0.1/queue/queue-debug" ], function(require, exports, module) {
    var $, Backbone, Cell, Form, Queue, _;
    $ = require("jquery-debug");
    _ = require("underscore-debug");
    Backbone = require("backbone-debug");
    Cell = require("/assets/vendor/Zonda/vendor/util/0.0.1/form/cell-debug");
    Queue = require("/assets/vendor/Zonda/vendor/util/0.0.1/queue/queue-debug");
    Form = function() {
        function Form(sel, config) {
            this.sel = sel;
            this.config = config;
            _.extend(this, Backbone.Events);
            this.cells = Cell(sel);
            this.dom = $(sel);
            this.name = this.dom.attr("name");
            if (this.name === void 0) {
                throw "From:" + this.sel + " must have a name!";
            }
        }
        Form.prototype.listen = function(evt) {
            var _this = this;
            return _.each(this.cells, function(cell) {
                if (_.keys(cell.tasks).length === 0) {
                    return null;
                }
                return cell.dom.on(evt, function() {
                    return _this.taskRunner(cell);
                });
            });
        };
        Form.prototype.taskRunner = function(cell) {
            var name, namespace, task_number, task_queue, _results, _this = this;
            if (cell.dom.is(":hidden")) {
                return null;
            }
            if (cell.status === "running") {
                return null;
            } else {
                cell.status = "running";
            }
            namespace = "" + this.name + ":" + cell.name + ":taskRunner";
            task_number = _.keys(cell.tasks).length;
            task_queue = new Queue(namespace, task_number);
            task_queue.once("" + namespace + ":queue:error", function(err_cell) {
                cell.status = "error";
                return cell.dom.parents(".control-group").removeClass("success").addClass("warning").find(".help-inline").html('<i class="icon-warning-sign"></i> ' + err_cell.info);
            });
            task_queue.once("" + namespace + ":queue:success", function() {
                var form_group;
                cell.status = "success";
                form_group = cell.dom.parents(".control-group");
                form_group.removeClass("warning").find(".help-inline").empty();
                if (_this.config && _this.config.error_only) {
                    return true;
                }
                return form_group.addClass("success").find(".help-inline").html('<i class="icon-ok-sign"></i>');
            });
            _results = [];
            for (name in cell.tasks) {
                if (!(name in this.tasks)) {
                    throw "No such task named " + name + "!";
                }
                task_queue.setter(name, "running");
                _results.push(this.tasks[name](cell, task_queue));
            }
            return _results;
        };
        Form.prototype.dump = function(callback, context) {
            var dump_queue, task_cells, _callback, _this = this;
            _callback = function(err_cell) {
                var data;
                data = {};
                _.each(_this.cells, function(cell) {
                    return cell.dom.disabled = false;
                });
                if (callback && !context) {
                    callback(err_cell);
                }
                if (callback && context) {
                    return callback.call(context, err_cell);
                }
            };
            task_cells = [];
            _.each(this.cells, function(cell) {
                cell.dom.disabled = true;
                if (_.keys(cell.tasks).length === 0) {
                    return null;
                }
                return task_cells.push(cell);
            });
            dump_queue = new Queue("" + this.name + ":dump", task_cells.length);
            dump_queue.once("" + this.name + ":dump:queue:success", _callback);
            dump_queue.once("" + this.name + ":dump:queue:error", _callback);
            return _.each(task_cells, function(cell) {
                var namespace;
                namespace = "" + _this.name + ":" + cell.name + ":taskRunner:queue";
                dump_queue.setter(cell.name, "running");
                Backbone.Events.once("" + namespace + ":success", function() {
                    Backbone.Events.off("" + namespace + ":error");
                    return dump_queue.setter(cell.name, "success");
                });
                Backbone.Events.once("" + namespace + ":error", function(err_cell) {
                    Backbone.Events.off("" + namespace + ":success");
                    return dump_queue.setter(cell.name, "error", err_cell);
                });
                return _this.taskRunner(cell);
            });
        };
        Form.prototype.registerTask = function(name, task, is_global) {
            name = name.toLowerCase();
            return this.tasks[name] = task;
        };
        Form.prototype.tasks = {
            regexp: function(cell, task_queue) {
                var exp;
                exp = cell.tasks.regexp.replace(/^\//, "");
                exp = exp.replace(/\/$/, "");
                exp = new RegExp(exp);
                if (exp.test(cell.dom.val())) {
                    return task_queue.setter("regexp", "success");
                } else {
                    return task_queue.setter("regexp", "error", "格式错误");
                }
            }
        };
        return Form;
    }();
    return module.exports = Form;
});

// Generated by CoffeeScript 1.6.3
(function() {
    define("/assets/vendor/Zonda/vendor/util/0.0.1/form/cell-debug", [], function(require, exports, module) {
        var ALIAS, Cell, Wrap, filter;
        filter = function(attrs) {
            var attr, key, name, tasks;
            tasks = {};
            for (key in attrs) {
                attr = attrs[key];
                if (typeof attr !== "object") {
                    continue;
                }
                if (attr === null) {
                    continue;
                }
                name = attr.name.toLowerCase();
                if (!/^task-/.test(name)) {
                    continue;
                }
                name = name.replace(/^task-/, "");
                tasks[name] = attr.value;
            }
            return tasks;
        };
        ALIAS = {
            "INPUT:text": "text",
            "INPUT:password": "password",
            "INPUT:radio": "radio",
            "INPUT:checkbox": "checkbox",
            TEXTAREA: "textarea",
            SELECT: "select"
        };
        Wrap = function(form) {
            var cells, sel, type;
            cells = [];
            for (sel in ALIAS) {
                type = ALIAS[sel];
                $(form).find(sel).each(function() {
                    return cells.push(new Cell(type, this));
                });
            }
            return cells;
        };
        Cell = function() {
            function Cell(type, cell) {
                var attrs, value;
                this.type = type;
                attrs = cell.attributes;
                cell = $(cell);
                this.dom = cell;
                this.group_dom = this.dom.parents(".form-group");
                this.name = cell.attr("name");
                this["default"] = cell.attr("default");
                value = cell.attr("value");
                if (this["default"] !== void 0 && value === void 0) {
                    cell.val(this["default"]);
                }
                this.tasks = filter(attrs);
            }
            return Cell;
        }();
        return module.exports = Wrap;
    });
}).call(this);

// Generated by CoffeeScript 1.6.2
define("/assets/vendor/Zonda/vendor/util/0.0.1/genre/genre-debug", [ "underscore-debug", "/assets/vendor/Zonda/vendor/util/0.0.1/exception/exception-debug" ], function(require, exports, module) {
    var Exception, Genre, getType, _;
    _ = require("underscore-debug");
    Exception = require("/assets/vendor/Zonda/vendor/util/0.0.1/exception/exception-debug");
    getType = function(target) {
        return Object.prototype.toString.call(target);
    };
    Genre = function() {
        function Genre(NAME, API) {
            var _this = this;
            this.NAME = NAME;
            this.API = API;
            this.GENRE = {};
            this.recursive(this.API.genre, function(key, value, position) {
                var alias_position, info;
                position = position.replace(/\s*/g, "").split("/");
                alias_position = _.clone(position);
                _.each(position, function(cell, index) {
                    position[index] = cell.split("~")[0];
                    return alias_position[index] = function() {
                        var name_list;
                        name_list = cell.split(":")[0].split("~");
                        if (name_list.length < 2) {
                            return name_list[0];
                        } else {
                            return name_list[1];
                        }
                    }();
                });
                position = position.join("/");
                alias_position = alias_position.join("/");
                key = key.replace(/\s*/g, "");
                info = key.split(":");
                _this.GENRE[position] = {
                    local_name: info[0].split("~")[0],
                    remote_name: info[0].split("~")[1],
                    genre: info[1].replace(/^@/g, ""),
                    essential_act: function() {}()
                };
                return _this.GENRE[alias_position] = _this.GENRE[position];
            });
        }
        Genre.prototype.recursive = function(source, action, position) {
            var result, top, _this = this;
            top = this.NAME ? this.NAME : "TOP";
            if (!position) {
                position = top;
            }
            if ("[object Object]" === getType(source)) {
                result = {};
                _.each(source, function(value, key) {
                    var here, mod_key;
                    here = "" + position + "/" + key;
                    mod_key = action(key, value, here);
                    if (mod_key) {
                        key = mod_key;
                    }
                    result[key] = value;
                    if ("[object Object]" === getType(value) || "[object Array]" === getType(value)) {
                        return result[key] = _this.recursive(value, action, here);
                    }
                });
                return result;
            }
            if ("[object Array]" === getType(source)) {
                result = [];
                _.each(source, function(el, key) {
                    return result.push(_this.recursive(el, action, "" + position + "/[]"));
                });
                return result;
            }
            return source;
        };
        Genre.prototype.genre_map = {
            Function: "[object Function]",
            Object: "[object Object]",
            Array: "[object Array]",
            Number: "[object Number]",
            String: "[object String]"
        };
        Genre.prototype.inspect = function(source, act) {
            var genre, _this = this;
            genre = _.clone(this.GENRE);
            this.recursive(source, function(key, value, position) {
                if (!_this.GENRE[position]) {
                    return null;
                }
                if (_this.genre_map[_this.GENRE[position].genre] !== getType(value)) {
                    return Exception("genre", {
                        position: position,
                        expect: _this.genre_map[_this.GENRE[position].genre],
                        not: getType(value)
                    });
                } else {
                    return genre[position].is_inspected = true;
                }
            });
            return true;
        };
        Genre.prototype.modifyKey = function(source, direction) {
            var _this = this;
            return this.recursive(source, function(key, value, position) {
                if (_this.GENRE[position]) {
                    return _this.GENRE[position][direction];
                }
            });
        };
        Genre.prototype.toLocal = function(source) {
            return this.modifyKey(source, "local_name");
        };
        Genre.prototype.toRemote = function(source) {
            return this.modifyKey(source, "remote_name");
        };
        return Genre;
    }();
    return module.exports = Genre;
});

// Generated by CoffeeScript 1.6.2
define("/assets/vendor/Zonda/vendor/util/0.0.1/model/model-debug", [ "underscore-debug", "backbone-debug", "/assets/vendor/Zonda/vendor/util/0.0.1/genre/genre-debug", "/assets/vendor/Zonda/vendor/util/0.0.1/exception/exception-debug", "/assets/vendor/Zonda/vendor/util/0.0.1/http/http-debug", "jquery-debug" ], function(require, exports, module) {
    var Backbone, Genre, Http, Model, _;
    _ = require("underscore-debug");
    Backbone = require("backbone-debug");
    Genre = require("/assets/vendor/Zonda/vendor/util/0.0.1/genre/genre-debug");
    Http = require("/assets/vendor/Zonda/vendor/util/0.0.1/http/http-debug");
    Model = function() {
        function Model(NAME, API) {
            var _this = this;
            this.NAME = NAME;
            this.API = API;
            _.extend(this, Backbone.Events);
            this.connection_stack = [];
            if (this.id) {
                this.namespace = "" + this.NAME + ":" + this.id;
            } else {
                this.namespace = "" + this.NAME;
            }
            this.genre = new Genre("@" + this.NAME, this.API);
            _.each(this.API, function(detail, act) {
                if (act === "genre") {
                    return;
                }
                return _this[act] = function(request) {
                    return _this.sync(act, request);
                };
            });
        }
        Model.prototype.sync = function(act, request) {
            var _this = this;
            if (request !== void 0 && typeof request !== "object") {
                throw "[" + this.NAME + "] Model.sync ERROR: request is not a object!";
            }
            this.genre.inspect(request);
            this.genre.toRemote(request);
            this.once("" + this.namespace + ":" + act + ":HTTP:success", function(respond) {
                respond = _this.genre.toLocal(respond);
                return _this.trigger("" + _this.namespace + ":" + act + ":success", respond);
            });
            return this.connection_stack.push(Http({
                url: this.API[act].url,
                data: request,
                caller: this,
                namespace: "" + this.namespace + ":" + act,
                fake: this.API[act].fake
            }));
        };
        Model.prototype.abort = function() {
            return _.each(this.connection_stack, function(con) {
                return con.abort();
            });
        };
        return Model;
    }();
    return module.exports = Model;
});

// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
};

define("/assets/vendor/Zonda/vendor/util/0.0.1/collection/collection-debug", [ "underscore-debug", "backbone-debug", "/assets/vendor/Zonda/vendor/util/0.0.1/exception/exception-debug", "/assets/vendor/Zonda/vendor/util/0.0.1/genre/genre-debug", "/assets/vendor/Zonda/vendor/util/0.0.1/model/model-debug", "/assets/vendor/Zonda/vendor/util/0.0.1/http/http-debug", "jquery-debug" ], function(require, exports, module) {
    var Backbone, Collection, Exception, Genre, Model, _;
    _ = require("underscore-debug");
    Backbone = require("backbone-debug");
    Exception = require("/assets/vendor/Zonda/vendor/util/0.0.1/exception/exception-debug");
    Genre = require("/assets/vendor/Zonda/vendor/util/0.0.1/genre/genre-debug");
    Model = require("/assets/vendor/Zonda/vendor/util/0.0.1/model/model-debug");
    Collection = function(_super) {
        __extends(Collection, _super);
        function Collection(config) {
            _.extend(this, Backbone.Events);
            this.NAME = config.NAME;
            this.namespace = this.NAME;
            this.API = config.API;
            this.Model = config.Model;
            this.View = config.View;
            this.model_list = {};
            this.view_list = {};
            this.genre = new Genre("@" + this.NAME, this.API);
            this.connection_stack = [];
        }
        Collection.prototype.fetch = function() {
            this.once("" + this.NAME + ":READ_LIST:HTTP:success", this.update, this);
            return this.sync("READ_LIST");
        };
        Collection.prototype.update = function(respond) {
            var _this = this;
            if ("[object Array]" !== Object.prototype.toString.call(respond)) {
                Exception("genre", {
                    position: "Collection:" + this.NAME + ":READ_LIST",
                    expect: "array",
                    not: typeof respond
                });
            }
            _.each(respond, function(id) {
                id = Math.abs(id);
                if (_this.model_list[id]) {
                    return _this.model_list[id].READ({
                        id: id
                    });
                } else {
                    return _this.factory(id);
                }
            });
            return _.each(this.model_list, function(model, id) {
                id = Math.abs(id);
                if (-1 === _.indexOf(respond, id)) {
                    delete this.model_list[id];
                    this.view_list[id].remove();
                    return delete this.view_list[id];
                }
            });
        };
        Collection.prototype.factory = function(id) {
            var model, view;
            model = new this.Model("" + this.NAME, this.API);
            model.id = id;
            view = new this.View(model);
            this.model_list[id] = model;
            this.view_list[id] = view;
            return model.READ({
                id: model.id
            });
        };
        return Collection;
    }(Model);
    return module.exports = Collection;
});
