// Generated by CoffeeScript 1.6.2
define(function(require, exports, module) {
  var Exception, Genre, getType, _;

  _ = require("underscore");
  Exception = require("../exception/exception");
  getType = function(target) {
    return Object.prototype.toString.call(target);
  };
  Genre = (function() {
    function Genre(NAME, API) {
      var _this = this;

      this.NAME = NAME;
      this.API = API;
      this.GENRE = {};
      this.recursive(this.API.genre, function(key, value, position) {
        var alias_position, info;

        position = (position.replace(/\s*/g, "")).split("/");
        alias_position = _.clone(position);
        _.each(position, function(cell, index) {
          position[index] = (cell.split("~"))[0];
          return alias_position[index] = (function() {
            var name_list;

            name_list = (cell.split(":"))[0].split("~");
            if (name_list.length < 2) {
              return name_list[0];
            } else {
              return name_list[1];
            }
          })();
        });
        position = position.join("/");
        alias_position = alias_position.join("/");
        key = key.replace(/\s*/g, "");
        info = key.split(":");
        _this.GENRE[position] = {
          local_name: (info[0].split("~"))[0],
          remote_name: (info[0].split("~"))[1],
          genre: info[1].replace(/^@/g, ""),
          essential_act: (function() {})()
        };
        return _this.GENRE[alias_position] = _this.GENRE[position];
      });
    }

    Genre.prototype.recursive = function(source, action, position) {
      var result, top,
        _this = this;

      top = this.NAME ? this.NAME : "TOP";
      if (!position) {
        position = top;
      }
      if ("[object Object]" === getType(source)) {
        result = {};
        _.each(source, function(value, key) {
          var here, mod_key;

          here = "" + position + "/" + key;
          mod_key = action(key, value, here);
          if (mod_key) {
            key = mod_key;
          }
          result[key] = value;
          if (("[object Object]" === getType(value)) || ("[object Array]" === getType(value))) {
            return result[key] = _this.recursive(value, action, here);
          }
        });
        return result;
      }
      if ("[object Array]" === getType(source)) {
        result = [];
        _.each(source, function(el, key) {
          return result.push(_this.recursive(el, action, "" + position + "/[]"));
        });
        return result;
      }
      return source;
    };

    Genre.prototype.genre_map = {
      "Function": "[object Function]",
      "Object": "[object Object]",
      "Array": "[object Array]",
      "Number": "[object Number]",
      "String": "[object String]"
    };

    Genre.prototype.inspect = function(source, act) {
      var genre,
        _this = this;

      genre = _.clone(this.GENRE);
      this.recursive(source, function(key, value, position) {
        if (!_this.GENRE[position]) {
          return null;
        }
        if (_this.genre_map[_this.GENRE[position].genre] !== getType(value)) {
          return Exception("genre", {
            position: position,
            expect: _this.genre_map[_this.GENRE[position].genre],
            not: getType(value)
          });
        } else {
          return genre[position].is_inspected = true;
        }
      });
      return true;
    };

    Genre.prototype.modifyKey = function(source, direction) {
      var _this = this;

      return this.recursive(source, function(key, value, position) {
        if (_this.GENRE[position]) {
          return _this.GENRE[position][direction];
        }
      });
    };

    Genre.prototype.toLocal = function(source) {
      return this.modifyKey(source, "local_name");
    };

    Genre.prototype.toRemote = function(source) {
      return this.modifyKey(source, "remote_name");
    };

    return Genre;

  })();
  return module.exports = Genre;
});
