// Generated by CoffeeScript 1.6.2
define(function(require, exports, module) {
  var Backbone, Genre, Http, Model, _;

  _ = require("underscore");
  Backbone = require("backbone");
  Genre = require("../genre/genre");
  Http = require("../http/http");
  Model = (function() {
    function Model(NAME, API) {
      var _this = this;

      this.NAME = NAME;
      this.API = API;
      _.extend(this, Backbone.Events);
      this.connection_stack = [];
      if (this.id) {
        this.namespace = "" + this.NAME + ":" + this.id;
      } else {
        this.namespace = "" + this.NAME;
      }
      this.genre = new Genre("@" + this.NAME, this.API);
      _.each(this.API, function(detail, act) {
        if (act === "genre") {
          return;
        }
        return _this[act] = function(request) {
          return _this.sync(act, request);
        };
      });
    }

    Model.prototype.sync = function(act, request) {
      var _this = this;

      if (request !== void 0 && typeof request !== "object") {
        throw "[" + this.NAME + "] Model.sync ERROR: request is not a object!";
      }
      this.genre.inspect(request);
      this.genre.toRemote(request);
      this.once("" + this.namespace + ":" + act + ":HTTP:success", function(respond) {
        respond = _this.genre.toLocal(respond);
        return _this.trigger("" + _this.namespace + ":" + act + ":success", respond);
      });
      return this.connection_stack.push(Http({
        url: this.API[act].url,
        data: request,
        caller: this,
        namespace: "" + this.namespace + ":" + act,
        fake: this.API[act].fake
      }));
    };

    Model.prototype.abort = function() {
      return _.each(this.connection_stack, function(con) {
        return con.abort();
      });
    };

    return Model;

  })();
  return module.exports = Model;
});
